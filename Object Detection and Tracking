import cv2
import torch
import numpy as np

# Load YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
model.eval()  # Set the model to evaluation mode

# Initialize video capture
cap = cv2.VideoCapture(0)  # Use 0 for webcam; replace with video file path if needed

# Define tracker
tracker = cv2.TrackerCSRT_create()  # CSRT tracker

# Flag to check if tracking has started
tracking = False

while True:
    ret, frame = cap.read()
    if not ret:
        break

    if not tracking:
        # Perform object detection
        results = model(frame)
        detections = results.pandas().xyxy[0]
        
        # Display results on the frame
        for _, row in detections.iterrows():
            x1, y1, x2, y2, conf, cls = int(row['xmin']), int(row['ymin']), int(row['xmax']), int(row['ymax']), row['confidence'], int(row['class'])
            label = f"{results.names[cls]} {conf:.2f}"
            frame = cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
            frame = cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

            # Initialize tracker with first detection
            bbox = (x1, y1, x2 - x1, y2 - y1)
            tracker.init(frame, bbox)
            tracking = True
            break  # Track only the first detected object
    else:
        # Update tracker
        success, bbox = tracker.update(frame)
        if success:
            x, y, w, h = [int(v) for v in bbox]
            frame = cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Display the frame
    cv2.imshow('Object Detection and Tracking', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
